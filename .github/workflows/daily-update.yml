name: Daily News Update

on:
  schedule:
    # 北京时间8-24时每两小时运行一次 (UTC时间0-16时)
    - cron: '0 0,2,4,6,8,10,12,14,16 * * *'
  # 允许手动触发
  workflow_dispatch:
    inputs:
      max_articles:
        description: '每个源最多获取的文章数量'
        required: false
        default: '100000'
      debug_mode:
        description: '启用调试模式'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-news:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # 需要完整历史记录来保持累积新闻
        fetch-depth: 0
        # 使用GitHub Token来推送更改
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # 安装必需的依赖
        pip install feedparser requests python-dateutil lxml
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Debug environment (if enabled)
      if: ${{ github.event.inputs.debug_mode == 'true' }}
      run: |
        echo "=== 调试信息 ==="
        echo "工作目录: $(pwd)"
        echo "目录内容:"
        ls -la
        echo "Python版本: $(python --version)"
        echo "当前时间:"
        echo "UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
        echo "环境变量:"
        env | grep GITHUB
        echo "RSS配置文件检查:"
        if [ -f "RSS feed URL/rss_feed_url.json" ]; then
          echo "✅ RSS配置文件存在"
          head -5 "RSS feed URL/rss_feed_url.json"
        else
          echo "❌ RSS配置文件不存在"
        fi
    
    - name: Check time window
      id: time-check
      run: |
        UTC_HOUR=$(date -u +%H)
        BEIJING_HOUR=$(TZ='Asia/Shanghai' date +%H)
        
        echo "当前UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "当前北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
        echo "UTC小时: $UTC_HOUR"
        echo "北京小时: $BEIJING_HOUR"
        
        # 北京时间8-24时对应UTC时间0-16时
        if [ $UTC_HOUR -ge 0 ] && [ $UTC_HOUR -le 16 ]; then
          echo "✅ 在运行时间窗口内 (北京时间 ${BEIJING_HOUR}:00)"
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "⏰ 不在运行时间窗口内 (北京时间 ${BEIJING_HOUR}:00)，跳过更新"
          echo "should_run=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Run update (Beijing 8-24h)
      if: steps.time-check.outputs.should_run == 'true'
      env:
        MAX_ARTICLES: ${{ github.event.inputs.max_articles || '100000' }}
      run: |
        BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
        echo "开始新闻更新 (北京时间工作时段)..."
        echo "北京时间: $BEIJING_TIME"
        echo "UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "最大文章数: $MAX_ARTICLES"
        python daily_update.py
    
    - name: Check for changes
      if: steps.time-check.outputs.should_run == 'true'
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "检测到文件变更"
          git status --porcelain
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "没有检测到文件变更"
        fi
    
    - name: Commit and push changes
      if: steps.time-check.outputs.should_run == 'true' && steps.verify-changed-files.outputs.changed == 'true'
      run: |
        BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
        git add .
        git commit -m "🤖 自动更新新闻 (北京时间: $BEIJING_TIME)"
        git push
    
    - name: Setup Pages
      if: steps.time-check.outputs.should_run == 'true' && steps.verify-changed-files.outputs.changed == 'true'
      uses: actions/configure-pages@v3
    
    - name: Upload artifact
      if: steps.time-check.outputs.should_run == 'true' && steps.verify-changed-files.outputs.changed == 'true'
      uses: actions/upload-pages-artifact@v2
      with:
        path: './feed'
    
    - name: Deploy to GitHub Pages
      if: steps.time-check.outputs.should_run == 'true' && steps.verify-changed-files.outputs.changed == 'true'
      id: deployment
      uses: actions/deploy-pages@v2
    
    - name: Create summary
      if: always()
      run: |
        BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
        UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
        
        echo "## 📊 定时更新结果" >> $GITHUB_STEP_SUMMARY
        echo "- **北京时间**: $BEIJING_TIME" >> $GITHUB_STEP_SUMMARY
        echo "- **UTC时间**: $UTC_TIME" >> $GITHUB_STEP_SUMMARY
        echo "- **状态**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **运行窗口**: 北京时间 8:00-24:00" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.time-check.outputs.should_run }}" = "true" ]; then
          echo "- **执行状态**: ✅ 在运行时间窗口内，已执行更新" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **执行状态**: ⏰ 不在运行时间窗口内，跳过更新" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.time-check.outputs.should_run }}" = "true" ] && [ -d "feed" ]; then
          echo "- **RSS文件**:" >> $GITHUB_STEP_SUMMARY
          for file in feed/*.xml; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
              echo "  - $(basename "$file"): ${size} bytes" >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi
        
        if [ "${{ steps.time-check.outputs.should_run }}" = "true" ] && [ -d "cumulative_news" ]; then
          echo "- **累积新闻文件**:" >> $GITHUB_STEP_SUMMARY
          for file in cumulative_news/*_cumulative.md; do
            if [ -f "$file" ]; then
              echo "  - $(basename "$file")" >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi
    
    - name: Upload logs on failure
      if: failure() && steps.time-check.outputs.should_run == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: error-logs-${{ github.run_number }}
        path: |
          daily_update.log
          *.log
        retention-days: 7