name: Daily News Update

on:
  schedule:
    - cron: '0 23,5,8 * * *'  # 北京时间 7, 13, 16 点触发
  # 允许手动触发
  workflow_dispatch:
    inputs:
      max_articles:
        description: '每个源最多获取的文章数量'
        required: false
        default: '100000'
      debug_mode:
        description: '启用调试模式'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

# 添加并发控制
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  update-news:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install feedparser requests python-dateutil lxml
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Debug environment (if enabled)
      if: ${{ github.event.inputs.debug_mode == 'true' }}
      run: |
        echo "=== 调试信息 ==="
        echo "工作目录: $(pwd)"
        echo "目录内容:"
        ls -la
        echo "Python版本: $(python --version)"
        echo "当前时间:"
        echo "UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
        if [ -f "RSS feed URL/rss_feed_url.json" ]; then
          echo "✅ RSS配置文件存在"
        else
          echo "❌ RSS配置文件不存在"
        fi
    
    - name: Show trigger info
      run: |
        echo "当前UTC时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
        echo "当前北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
        echo "触发方式: ${{ github.event_name }}"
        echo "✅ 开始执行更新任务"
    
    - name: Run update
      env:
        MAX_ARTICLES: ${{ github.event.inputs.max_articles || '100000' }}
      run: |
        BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
        echo "开始新闻更新..."
        echo "北京时间: $BEIJING_TIME"
        echo "最大文章数: $MAX_ARTICLES"
        echo "触发方式: ${{ github.event_name }}"
        python daily_update.py
    
    - name: Verify generated files
      run: |
        echo "=== 检查生成的文件 ==="
        echo "根目录文件:"
        ls -la *.html 2>/dev/null || echo "没有HTML文件"
        echo "feed目录:"
        ls -la feed/ 2>/dev/null || echo "feed目录不存在"
        echo "cumulative_news目录:"
        ls -la cumulative_news/ 2>/dev/null || echo "cumulative_news目录不存在"
        
        # 验证index.html是否存在且有内容
        if [ -f "index.html" ]; then
          echo "✅ index.html 存在"
          echo "文件大小: $(stat -c%s index.html 2>/dev/null || stat -f%z index.html 2>/dev/null) bytes"
        else
          echo "❌ index.html 不存在"
          exit 1
        fi
    
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "检测到文件变更"
          git status --porcelain
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "没有检测到文件变更"
        fi
    
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
        git add .
        git commit -m "🤖 自动更新新闻 (北京时间: $BEIJING_TIME) [触发方式: ${{ github.event_name }}]"
        git push
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Create summary
      if: always()
      run: |
        BEIJING_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')
        UTC_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
        
        echo "## 📊 定时更新结果" >> $GITHUB_STEP_SUMMARY
        echo "- **北京时间**: $BEIJING_TIME" >> $GITHUB_STEP_SUMMARY
        echo "- **UTC时间**: $UTC_TIME" >> $GITHUB_STEP_SUMMARY
        echo "- **触发方式**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **状态**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **计划运行**: 北京时间 7:00, 12:00, 16:00 (可能有延迟)" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.deployment.outputs.page_url }}" != "" ]; then
          echo "- **Pages URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **执行状态**: ✅ 已执行更新" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "feed" ]; then
          echo "- **RSS文件**:" >> $GITHUB_STEP_SUMMARY
          for file in feed/*.xml; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "unknown")
              echo "  - $(basename "$file"): ${size} bytes" >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs-${{ github.run_number }}
        path: |
          daily_update.log
          *.log
        retention-days: 7